import pygame

# on importe les images pour notre peronnages principal
walkRight = [pygame.image.load('Reverseyolo.png'), pygame.image.load('Ralkingyolo1.png'),
             pygame.image.load('Ralkingyolo2.png'), pygame.image.load('Ralkingyolo3.png'),
             pygame.image.load('Ralkingyolo4.png')]
# images pour l'animation de marche à droite
walkLeft = [pygame.image.load('Pizzayolo.png'), pygame.image.load('Walkingyolo1.png'),
            pygame.image.load('Walkingyolo2.png'), pygame.image.load('Walkingyolo3.png'),
            pygame.image.load('Walkingyolo4.png')]
# images pour l'animation de marche à gauche

img = pygame.image.load('pizzayolo.png')
# image du personnage à l'arrêt
blue = (113, 177, 227)
white = (255, 255, 255)
red = (227, 10, 150)

clock = pygame.time.Clock()
# variable permettant de changer le temps

pygame.init()

surfaceW = 1300
surfaceH = 1000
# on definit la longeur et largeur de la fenêtre

surface = pygame.display.set_mode((surfaceW, surfaceH))
# on creer une fenêtre

pygame.display.set_caption("JEU bastien Antoine Briac")


# on rassemble toutes les variables associées aux caractèristiques du personnage
class player(object):
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.vel = 5
        self.isJump = False
        self.jumpCount = 12
        self.right = False
        self.left = False
        self.walkCount = 0
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)
        # variables assosciées au personnage

    def mouvement(self, surface):
        # on choisi le nombre d'images de l'animation à mettre par pas.
        if pizzayolo.walkCount + 1 >= 25:
            pizzayolo.walkCount = 0

        if pizzayolo.left:
            surface.blit(walkLeft[pizzayolo.walkCount // 5], (pizzayolo.x, pizzayolo.y))
            pizzayolo.walkCount += 1
        elif pizzayolo.right:
            surface.blit(walkRight[pizzayolo.walkCount // 5], (pizzayolo.x, pizzayolo.y))
            pizzayolo.walkCount += 1
        else:
            surface.blit(img, (pizzayolo.x, pizzayolo.y))
            pizzayolo.walkCount = 0
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)
        pygame.draw.rect(surface, white, self.hitbox, 2)
        # on définit les mouvements du personnage et on appelle les images pour l'animation

class ennemie(object):
    def __init__(self, x, y , height, width, end):
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.end = end
        self.walkcount = 0
        self.vel = 3
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)
        pygame.draw.rect(surface, white, self.hitbox, 2)
        #variables associées à l'ennemie
    def bouger (self, surface):
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)
        pygame.draw.rect(surface, white, self.hitbox, 2)


class platform(object):
    def __init__(self, x, y, height, width):
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.hitbox = (self.x, self.y, 300, 10)

    def existance(self, surface):
        self.hitbox = (self.x, self.y, 300, 10)
        pygame.draw.rect(surface, red, self.hitbox, 2)

def personnage():
    pizzayolo.mouvement(surface)
    pizzaforme.existance(surface)
    plateyolo.existance(surface)
    pelateforme.existance(surface)
    mechantyolo.bouger(surface)
    pygame.display.update()

    # on ajoute le personnage au jeu


# Moteur du jeu
game_over = False
pizzayolo = player(150, 200, 32, 32)
mechantyolo = ennemie(100, 150, 32, 32, 2)
pizzaforme = platform(50, 400, 10, 300)
plateyolo = platform(450, 250, 10, 300)
pelateforme = platform(800, 500, 10, 300)


while not game_over:
    clock.tick(50)
    # permet de ralentir le jeu
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True

    # Definir la gravité
    gravity = 10
    pizzayolo.y += gravity
    mechantyolo.y += gravity

    # permet de prendre en compte l'utilisation des touches sur le clavier
    keys = pygame.key.get_pressed()

    # permet de faire bouger le personnage et l'empèche de sortir de l'écran
    if keys[pygame.K_LEFT] and pizzayolo.x > pizzayolo.vel:
        pizzayolo.x -= pizzayolo.vel
        pizzayolo.left = True
        pizzayolo.right = False
    elif keys[pygame.K_RIGHT] and pizzayolo.x < 1080 - pizzayolo.vel:
        pizzayolo.x += pizzayolo.vel
        pizzayolo.right = True
        pizzayolo.left = False
    else:
        pizzayolo.right = False
        pizzayolo.left = False
        pizzayolo.walkCount = 0
    if not (pizzayolo.isJump):

        # permet au personnage de sauter

        if keys[pygame.K_SPACE]:
            pizzayolo.isJump = True
            pizzayolo.right = True
            pizzayolo.left = True
            pizzayolo.walkCount = True
    else:
        if pizzayolo.jumpCount >= -12:
            neg = 1
            if pizzayolo.jumpCount < 0:
                neg = -1
            pizzayolo.y -= (pizzayolo.jumpCount ** 2) * 0.5 * neg
            pizzayolo.jumpCount -= 1
        else:
            pizzayolo.isJump = False
            pizzayolo.jumpCount = 12

    #on va essyer de faire fonctionner les hitbox ok
    if (pizzayolo.y > pizzaforme.y-100) and (pizzayolo.x > pizzaforme.x-85) and (pizzayolo.x < pizzaforme.x+280):
        pizzayolo.y = pizzaforme.y-100
        mechantyolo.y = pizzaforme.y-100
    if (pizzayolo.y > plateyolo.y-100) and (pizzayolo.x > plateyolo.x-85) and (pizzayolo.x < plateyolo.x+280):
        pizzayolo.y = plateyolo.y-100
        mechantyolo.y = plateyolo.y-100
    if (pizzayolo.y > pelateforme.y-100) and (pizzayolo.x > pelateforme.x-85) and (pizzayolo.x < pelateforme.x+280):
        pizzayolo.y = pelateforme.y-100
        mechantyolo.y = pelateforme.y-100
    surface.fill(blue)
    personnage()

pygame.quit()
quit()

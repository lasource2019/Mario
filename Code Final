import pygame
import time

background = pygame.image.load("Background2.jpg")
platformimg = pygame.image.load('platform.png')
# on importe les images pour notre peronnages principal
walkRight = [pygame.image.load('Reverseyolo.png'), pygame.image.load('Ralkingyolo1.png'),
             pygame.image.load('Ralkingyolo2.png'), pygame.image.load('Ralkingyolo3.png'),
             pygame.image.load('Ralkingyolo4.png')]
# images pour l'animation de marche à droite
walkLeft = [pygame.image.load('Pizzayolo.png'), pygame.image.load('Walkingyolo1.png'),
            pygame.image.load('Walkingyolo2.png'), pygame.image.load('Walkingyolo3.png'),
            pygame.image.load('Walkingyolo4.png')]
# images pour l'animation de marche à gauche

# image du personnage à l'arrêt
img = pygame.image.load('Pizzayolo.png')
imgmechant = pygame.image.load('Mechantyolo.png')
imgprincesse = pygame.image.load('Princesse.png')

blue = (113, 177, 227)
red = (227, 10, 150)

# variable permettant de changer le temps
clock = pygame.time.Clock()

pygame.init()
font = pygame.font.Font(None, 100)

# on definit la longeur et largeur de la fenêtre
surfaceW = 1275
surfaceH = 600

# Permet d'afficher la fenêtre
surface = pygame.display.set_mode((surfaceW, surfaceH))

pygame.display.set_caption("JEU bastien Antoine Briac")


# on rassemble toutes les variables associées aux caractèristiques du personnage
class player(object):
    def __init__(self, x, y, width, height):  #Fonction d'initialisation au sein de la classe permettant de définir les caractéristiques du personnage
                                              # Les attributs "x" "y" "width" et "height" représentent la position du personnage ainsi que ses dimensions
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.vel = 5
        self.isJump = False
        self.jumpCount = 13      # Définit la hauteur du saut
        self.walkCount = 0
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)

    def mouvement(self, surface):   # L'attribut Surface permet d'appliquer la fonction dans la fenêtre
        if keys [pygame.K_RIGHT]:
            self.left = True
            self.right = False
        elif keys[pygame.K_LEFT]:
            self.right = True
            self.left = False
        else:
            self.right = False
            self.left = False
            self.walkCount = 0
# on choisi le nombre d'images de l'animation à mettre par pas.
        if pizzaiolo.walkCount + 1 >= 25:
            pizzaiolo.walkCount = 0
        # on définit les mouvements du personnage et on appelle les images pour l'animation

        if pizzaiolo.left:
            surface.blit(walkLeft[pizzaiolo.walkCount // 5], (pizzaiolo.x, pizzaiolo.y))
            pizzaiolo.walkCount += 1
        elif pizzaiolo.right:
            surface.blit(walkRight[pizzaiolo.walkCount // 5], (pizzaiolo.x, pizzaiolo.y))
            pizzaiolo.walkCount += 1
        else:
            surface.blit(img, (pizzaiolo.x, pizzaiolo.y))
            pizzaiolo.walkCount = 0
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)

#variables associées aux caractéristiques de l'ennemi

class ennemie(object):
    def __init__(self, x, y, height, width): #Fonction d'initialisation au sein de la classe permettant de définir les caractéristiques des ennemis
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.vel = 10
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)

    def Mouvementdesennemis (self, surface):  # Cette fonction permet de faire bouger les ennemis lorsqu'on appuie sur les touches
                                              # L'attribut Surface représente permet d'appliquer la fonction dans la fenêtre
        if keys[pygame.K_RIGHT] :
            self.x -= self.vel
        elif keys[pygame.K_LEFT]:
            self.x += self.vel
        self.hitbox = (self.x + 20, self.y + 10, 60, 90)
        surface.blit(imgmechant, (self.x, self.y))
        if (self.y >= pizzaiolo.y >= self.y-100) and (self.x+50 >= pizzaiolo.x >= self.x-25):
            message('Perdu', red)
            time.sleep(2)
            pygame.quit()


class princesse(object):
    def __init__(self, x, y , height, width): #Fonction d'initialisation au sein de la classe permettant de définir les caractéristiques de la princesse
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.vel = 10
        self.hitbox = (self.x, self.y, 120, 120)
#variables associées aux caractéristiques de l'ennemi

    def existe(self, surface):
        if keys[pygame.K_RIGHT]:
            self.x -= self.vel
        elif keys[pygame.K_LEFT]:
            self.x += self.vel
        self.hitbox = (self.x, self.y + 10, 120, 120)
        surface.blit(imgprincesse, (self.x, self.y))
        if (self.y-10 >= pizzaiolo.y >= self.y-100) and (self.x+280 >= pizzaiolo.x >= self.x-85):
            message('bravo', red)
            time.sleep(2)
            pygame.quit()

class plateforme(object):
    def __init__(self, x, y, height, width): #Fonction d'initialisation au sein de la classe permettant de définir les caractéristiques de la plateforme
        self.x = x
        self.y = y
        self.height = height
        self.width = width
        self.vel = 10
        self.hitbox = (self.x, self.y, 300, 10)

    def Mouvementplateforme(self, surface):# Cette fonction permet de faire bouger les plateformes lorsqu'on appuie sur les touches
                                           # L'attribut Surface représente permet d'appliquer la fonction dans la fenêtre
        if keys[pygame.K_RIGHT]:
            self.x -= self.vel
        elif keys[pygame.K_LEFT]:
            self.x += self.vel
        self.hitbox = (self.x, self.y, 300, 10)
        surface.blit(platformimg, (self.x, self.y))

#on essaye d'afficher du texte

def message(msg, color):
    screentext = font.render(msg, True, color)
    surface.blit(screentext, (300, 300))
    pygame.display.update()


def personnage():   # Permet d'ajouter les personnages dans le jeu
    pizzaiolo.mouvement(surface)
    plateforme1.Mouvementplateforme(surface)
    plateforme2.Mouvementplateforme(surface)
    plateforme3.Mouvementplateforme(surface)
    plateforme4.Mouvementplateforme(surface)
    plateforme5.Mouvementplateforme(surface)
    plateforme6.Mouvementplateforme(surface)
    plateforme7.Mouvementplateforme(surface)
    plateforme8.Mouvementplateforme(surface)
    plateforme9.Mouvementplateforme(surface)
    plateforme10.Mouvementplateforme(surface)
    plateforme11.Mouvementplateforme(surface)
    plateforme12.Mouvementplateforme(surface)
    plateforme13.Mouvementplateforme(surface)
    plateforme14.Mouvementplateforme(surface)
    plateforme15.Mouvementplateforme(surface)
    plateforme16.Mouvementplateforme(surface)
    mechantyolo1.Mouvementdesennemis(surface)
    mechantyolo2.Mouvementdesennemis(surface)
    mechantyolo3.Mouvementdesennemis(surface)
    mechantyolo4.Mouvementdesennemis(surface)
    mechantyolo5.Mouvementdesennemis(surface)
    mechantyolo6.Mouvementdesennemis(surface)
    mechantyolo7.Mouvementdesennemis(surface)
    mechantyolo8.Mouvementdesennemis(surface)
    mechantyolo9.Mouvementdesennemis(surface)
    mechantyolo10.Mouvementdesennemis(surface)
    pizzareine.existe(surface)
    pygame.display.update()

# Moteur du jeu
game_over = False
pizzaiolo = player(150, 200, 32, 32)
mechantyolo1 = ennemie(80, 300, 32, 32)
mechantyolo2 = ennemie(500, 150, 32, 32)
mechantyolo3 = ennemie(1350, 300, 32, 32)
mechantyolo4 = ennemie(1550, 400, 32, 32)
mechantyolo5 = ennemie(2450, 0, 32, 32)
mechantyolo6 = ennemie(3100, 300, 32, 32)
mechantyolo7 = ennemie(4100, 280, 32, 32)
mechantyolo8 = ennemie(4650, 400, 32, 32)
mechantyolo9 = ennemie(5400, 150, 32, 32)
mechantyolo10 = ennemie(6750, 350, 32, 32)
plateforme1 = plateforme(50, 400, 10, 300)
plateforme2 = plateforme(450, 250, 10, 300)
plateforme3 = plateforme(800, 500, 10, 300)
plateforme4 = plateforme(1300, 400, 10, 300)
plateforme5 = plateforme(1500, 500, 10, 300)
plateforme6 = plateforme(1700, 300, 10, 300)
plateforme7 = plateforme(2000, 300, 10, 300)
plateforme8 = plateforme(2400, 100, 10, 300)
plateforme9 = plateforme(3000, 400, 10, 300)
plateforme10 = plateforme(3550, 530, 10, 300)
plateforme11 = plateforme(4050, 380, 10, 300)
plateforme12 = plateforme(4550, 500, 10, 300)
plateforme13 = plateforme(4750, 300, 10, 300)
plateforme14 = plateforme(5300, 240, 10, 300)
plateforme15 = plateforme(5800, 500, 10, 300)
plateforme16 = plateforme(6600, 450, 10, 300)
pizzareine = princesse(7000, 400, 32, 32)

while not game_over:
    clock.tick(50)
# permet de ralentir le jeu
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True

# Definir la gravité
    gravity = 10
    pizzaiolo.y += gravity
# permet de prendre en compte l'utilisation des touches sur le clavier
    keys = pygame.key.get_pressed()

    if not (pizzaiolo.isJump):

# permet au personnage de sauter

        if keys[pygame.K_SPACE]:
            pizzaiolo.isJump = True
            pizzaiolo.right = True
            pizzaiolo.left = True
            pizzaiolo.walkCount = True
    else:
        if pizzaiolo.jumpCount >= -12:
            neg = 1
            if pizzaiolo.jumpCount < 0:
                neg = -1
            pizzaiolo.y -= (pizzaiolo.jumpCount ** 2) * 0.5 * neg
            pizzaiolo.jumpCount -= 1
        else:
            pizzaiolo.isJump = False
            pizzaiolo.jumpCount = 13


# Permet de définir la hitbox de chaque plateforme
    if (plateforme1.y-10 >= pizzaiolo.y >= plateforme1.y-100) and (plateforme1.x+280 >= pizzaiolo.x >= plateforme1.x-85):
        pizzaiolo.y = plateforme1.y-100
    if (plateforme2.y-10 > pizzaiolo.y > plateforme2.y-100) and (plateforme2.x+280 >= pizzaiolo.x >= plateforme2.x-85):
        pizzaiolo.y = plateforme2.y-100
    if (plateforme3.y-10 > pizzaiolo.y > plateforme3.y-100) and (plateforme3.x+280 >= pizzaiolo.x >= plateforme3.x-85):
        pizzaiolo.y = plateforme3.y-100
    if (plateforme4.y-10 >= pizzaiolo.y >= plateforme4.y-100) and (plateforme4.x+280 >= pizzaiolo.x >= plateforme4.x-85):
        pizzaiolo.y = plateforme4.y-100
    if (plateforme5.y-10 >= pizzaiolo.y >= plateforme5.y-100) and (plateforme5.x+280 >= pizzaiolo.x >= plateforme5.x-85):
        pizzaiolo.y = plateforme5.y-100
    if (plateforme6.y-10 > pizzaiolo.y > plateforme6.y-100) and (plateforme6.x+280 >= pizzaiolo.x >= plateforme6.x-85):
        pizzaiolo.y = plateforme6.y-100
    if (plateforme7.y-10 > pizzaiolo.y > plateforme7.y-100) and (plateforme7.x+280 >= pizzaiolo.x >= plateforme7.x-85):
        pizzaiolo.y = plateforme7.y-100
    if (plateforme8.y-10 >= pizzaiolo.y >= plateforme8.y-100) and (plateforme8.x+280 >= pizzaiolo.x >= plateforme8.x-85):
        pizzaiolo.y = plateforme8.y-100
    if (plateforme9.y-10 >= pizzaiolo.y >= plateforme9.y-100) and (plateforme9.x+280 >= pizzaiolo.x >= plateforme9.x-85):
        pizzaiolo.y = plateforme9.y-100
    if (plateforme10.y-10 >= pizzaiolo.y >= plateforme10.y-100) and (plateforme10.x+280 >= pizzaiolo.x >= plateforme10.x-85):
        pizzaiolo.y = plateforme10.y-100
    if (plateforme11.y-10 >= pizzaiolo.y >= plateforme11.y-100) and (plateforme11.x+280 >= pizzaiolo.x >= plateforme11.x-85):
        pizzaiolo.y = plateforme11.y-100
    if (plateforme12.y-10 >= pizzaiolo.y >= plateforme12.y-100) and (plateforme12.x+280 >= pizzaiolo.x >= plateforme12.x-85):
        pizzaiolo.y = plateforme12.y-100
    if (plateforme13.y-10 >= pizzaiolo.y >= plateforme13.y-100) and (plateforme13.x+280 >= pizzaiolo.x >= plateforme13.x-85):
        pizzaiolo.y = plateforme13.y-100
    if (plateforme14.y-10 >= pizzaiolo.y >= plateforme14.y-100) and (plateforme14.x+280 >= pizzaiolo.x >= plateforme14.x-85):
        pizzaiolo.y = plateforme14.y-100
    if (plateforme15.y-10 >= pizzaiolo.y >= plateforme15.y-100) and (plateforme15.x+280 >= pizzaiolo.x >= plateforme15.x-85):
        pizzaiolo.y = plateforme15.y-100
    if (plateforme16.y-10 >= pizzaiolo.y >= plateforme16.y-100) and (plateforme16.x+280 >= pizzaiolo.x >= plateforme16.x-85):
        pizzaiolo.y = plateforme16.y-100

    if pizzaiolo.y >= 700:  # Permet de faire apparaitre le personnage à sa position initiale après une chute
        message('Perdu', red)
        time.sleep(1)
        pizzaiolo = player(150, 200, 32, 32)
        mechantyolo1 = ennemie(80, 300, 32, 32)
        mechantyolo2 = ennemie(500, 150, 32, 32)
        mechantyolo3 = ennemie(1350, 300, 32, 32)
        mechantyolo4 = ennemie(1550, 400, 32, 32)
        mechantyolo5 = ennemie(2450, 0, 32, 32)
        mechantyolo6 = ennemie(3100, 300, 32, 32)
        mechantyolo7 = ennemie(4100, 280, 32, 32)
        mechantyolo8 = ennemie(4650, 400, 32, 32)
        mechantyolo9 = ennemie(5400, 150, 32, 32)
        mechantyolo10 = ennemie(6750, 350, 32, 32)
        plateforme1 = plateforme(50, 400, 10, 300)
        plateforme2 = plateforme(450, 250, 10, 300)
        plateforme3 = plateforme(800, 500, 10, 300)
        plateforme4 = plateforme(1300, 400, 10, 300)
        plateforme5 = plateforme(1500, 500, 10, 300)
        plateforme6 = plateforme(1700, 300, 10, 300)
        plateforme7 = plateforme(2000, 300, 10, 300)
        plateforme8 = plateforme(2400, 100, 10, 300)
        plateforme9 = plateforme(3000, 400, 10, 300)
        plateforme10 = plateforme(3550, 530, 10, 300)
        plateforme11 = plateforme(4050, 380, 10, 300)
        plateforme12 = plateforme(4550, 500, 10, 300)
        plateforme13 = plateforme(4750, 300, 10, 300)
        plateforme14 = plateforme(5300, 240, 10, 300)
        plateforme15 = plateforme(5800, 500, 10, 300)
        plateforme16 = plateforme(6600, 450, 10, 300)
        pizzareine = princesse(7000, 400, 32, 32)

    # Permet de faire bouger les plateformes verticalement
    plateforme3.y -=5
    if plateforme3.y == 0:
        plateforme3.y = 700
    plateforme15.y -=5
    if plateforme15.y == 0:
        plateforme15.y = 700

# Permet de créer une plateforme piège qui tombe lorsqu'on marche dessus
    if (plateforme4.y - 10 >= pizzaiolo.y >= plateforme4.y - 100) and (plateforme4.x + 280 >= pizzaiolo.x >= plateforme4.x - 85):
        plateforme4.y += 40
    if (plateforme16.y - 10 >= pizzaiolo.y >= plateforme16.y - 100) and (plateforme16.x + 280 >= pizzaiolo.x >= plateforme16.x - 85):
        plateforme16.y += 40
    if (plateforme12.y - 10 >= pizzaiolo.y >= plateforme12.y - 100) and (plateforme12.x + 280 >= pizzaiolo.x >= plateforme12.x - 85):
        plateforme12.y += 40

    surface.blit(background , (0,0))
    personnage()
message('Merci', red)
time.sleep(1)
pygame.quit()
quit()
